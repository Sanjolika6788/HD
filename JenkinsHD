pipeline {
    agent any

    environment {
        NODEJS_HOME = tool name: 'NodeJS' // Adjust this to your NodeJS tool configuration
        PATH = "${NODEJS_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/your-username/your-repo.git' // Replace with your repository URL
            }
        }

        stage('Build') {
            steps {
                script {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    sh 'npm test'
                }
                junit '**/test-results/*.xml'
            }
        }

        stage('Code Quality Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') { // Configure SonarQube in Jenkins
                        sh 'sonar-scanner'
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    sh 'docker build -t your-app:staging .'
                    sh 'docker run -d -p 8080:8080 your-app:staging'
                }
            }
        }

        stage('Release to Production') {
            steps {
                script {
                    // Assuming AWS CodeDeploy or similar tool
                    sh 'aws deploy create-deployment --application-name your-app --deployment-group-name your-deployment-group --revision revisionType=S3,bucket=bucketName,key=keyName'
                }
            }
        }

        stage('Monitoring and Alerting') {
            steps {
                script {
                    // Configure Datadog or New Relic
                    sh 'curl -X POST "https://api.datadoghq.com/api/v1/monitor" -H "Content-Type: application/json" -d \'{"type": "metric alert", "query": "avg(last_5m):sum:system.net.bytes_rcvd{host:host0} > 100"}\''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
